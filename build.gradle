// Global gradle configuration. This configuration will be used for all sub-projects.
apply from: './configuration.gradle'
apply from: './repositories.gradle'
apply from: './dependencies.gradle'

/**
 * Global build script configuration ===============================================================
 */
buildscript {
    apply from: './repositories.gradle'

    repositories {
        jcenter()
        maven { url repos.google }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.3'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'universum.studios.gradle:github-plugin:1.1.2'
    }
}

/**
 * All projects global configuration ===============================================================
 */
allprojects {
    repositories {
        jcenter()
        maven { url repos.google }
    }
}

/**
 * All projects global tasks =======================================================================
 */
/**
 * Task that cleans build directory of the root project.
 */
task clean(type: Delete) {
    delete rootProject.buildDir
}

/**
 * Task that updates library artifacts directory.
 */
task updateArtifacts() {
    subprojects.findAll { if (it.name.startsWith("library")) dependsOn ":${it.name}:updateArtifacts" }
    doLast {
        final String artifactsDir = "${rootProject.rootDir}\\artifacts"
        if (file(artifactsDir).exists()) {
            exec {
                commandLine 'git', 'add', artifactsDir, '-A'
            }
        }
    }
}

/**
 * Task that deploys (uploads) all library modules (except groups) into Maven local repository.
 */
task deployModulesToMavenLocal() {
    subprojects.findAll { if (it.name.startsWith("library-") && !it.name.endsWith('_group')) dependsOn ":${it.name}:uploadArchives" }
}

/**
 * Task that deploys (uploads) all library module groups into Maven local repository.
 */
task deployGroupsToMavenLocal() {
    subprojects.findAll { if (it.name.startsWith("library-") && it.name.endsWith('_group')) dependsOn ":${it.name}:uploadArchives" }
}

/**
 * Task that deploys (uploads) all library modules (except groups) up to the Bintray repository.
 */
task deployModulesToBintray() {
    subprojects.findAll { if (it.name.startsWith("library-") && !it.name.endsWith('_group')) dependsOn ":${it.name}:bintrayUpload" }
}

/**
 * Task that deploys (uploads) all library module groups up to the Bintray repository.
 */
task deployGroupsToBintray() {
    subprojects.findAll { if (it.name.startsWith("library-") && it.name.endsWith('_group')) dependsOn ":${it.name}:bintrayUpload" }
}

/**
 * Task that deploys (uploads) the primary library module into Maven local repository.
 */
task deployToMavenLocal(dependsOn: ':library:uploadArchives')

/**
 * Task that deploys (uploads) the primary library module up to the Bintray repository.
 */
task deployToBintray(dependsOn: ':library:bintrayUpload')

/**
 * Task that deploys (uploads) the primary library module up to the GitHub repository.
 */
task deployToGitHub(dependsOn: ':library:githubUploadProductionRelease')